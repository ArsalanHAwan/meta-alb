From 7ad162492407794a37a9299092d4b0d1ec486847 Mon Sep 17 00:00:00 2001
From: Heinz Wrobel <Heinz.Wrobel@nxp.com>
Date: Fri, 18 Jan 2019 15:10:06 +0200
Subject: [PATCH 3/3] seccomp handling was not checked properly and caused a
 crash.

While it is not implemented properly still, it is now checked for
and rejected properly.

Signed-off-by: Heinz Wrobel <Heinz.Wrobel@nxp.com>
Signed-off-by: Catalin Udma <catalin-dan.udma@nxp.com>
---
 linux-user/syscall.c | 10 ++++++----
 1 file changed, 6 insertions(+), 4 deletions(-)

diff --git a/linux-user/syscall.c b/linux-user/syscall.c
index 2f02fb4..05c9d26 100644
--- a/linux-user/syscall.c
+++ b/linux-user/syscall.c
@@ -31,6 +31,7 @@
 #include <sys/fsuid.h>
 #include <sys/personality.h>
 #include <sys/prctl.h>
+#include <linux/seccomp.h>
 #include <sys/resource.h>
 #include <sys/swap.h>
 #include <linux/capability.h>
@@ -10605,10 +10606,11 @@ abi_long do_syscall(void *cpu_env, int num, abi_long arg1,
 #endif
         case PR_GET_SECCOMP:
         case PR_SET_SECCOMP:
-            /* Disable seccomp to prevent the target disabling syscalls we
-             * need. */
-            ret = -TARGET_EINVAL;
-            break;
+        {
+            if (arg2 == SECCOMP_MODE_FILTER)
+                goto unimplemented;
+            ret = get_errno(prctl(arg1, arg2, arg3, arg4, arg5));
+        }
         default:
             /* Most prctl options have no pointer arguments */
             ret = get_errno(prctl(arg1, arg2, arg3, arg4, arg5));
-- 
2.7.4

