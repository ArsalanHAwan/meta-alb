From 5539ea35be2720baed3ee62276b723e04c84f542 Mon Sep 17 00:00:00 2001
From: nxa15299 <Heinz.Wrobel@nxp.com>
Date: Wed, 17 Jan 2018 08:55:19 +0100
Subject: [PATCH] rcw: rcw.py disassembler now deals with littleendian
 properly. Comments fixed, too

---
 rcw.py | 31 ++++++++++++++++++++++---------
 1 file changed, 22 insertions(+), 9 deletions(-)

diff --git a/rcw.py b/rcw.py
index 0a3fcff..cfdd323 100755
--- a/rcw.py
+++ b/rcw.py
@@ -50,7 +50,11 @@
 #       %size=1024              -- Must be set to RCW bit count
 #       %pbiformat=2            -- Must be set to 2 for LS2 platform PBI
 #       %classicbitnumbers=1    -- Non-Power Architecture bit numbering
-#       %littleendian=1         -- Needed for LS2 platform for byte ordering
+#       %littleendian=1         -- Needed for LS2 style platform
+#       %littleendian64b=1      -- Swaps eight bytes instead of four
+#       %dont64swapcrc          -- Can be set if CRC should stay normal
+#                                  for %littleendian64b=1
+#       %sysaddr, %pbladdr      -- Hex needed for pbiformat=1
 #
 #
 # 4. A PBI can be defined in a .pbi/.end block.  Start the section with a line
@@ -150,13 +154,13 @@ def command_line():
         action='store_false', default=True)
 
     parser.add_option('-r', dest='reverse', help='generate a source file from a binary.  '
-        'Must also specify --rcw.  --pbl option is ignored.', action='store_true',
+        'Must also specify --rcwi.  --pbl option is ignored.', action='store_true',
             default=False)
 
     parser.add_option('-I', dest='include', help='include path.  '
         'Can be specified multiple times', action="append")
 
-    parser.add_option('--rcwi', dest='rcwi', help='RCWI defintion filename.  '
+    parser.add_option('--rcwi', dest='rcwi', help='RCWI definition filename.  '
         'Used only if -r is specified.')
 
     parser.add_option('-w', dest='warnings', help='enable warning messages',
@@ -531,7 +535,12 @@ def check_vars():
 
     if options.pbl:
         if 'pbiformat' in vars and int(vars['pbiformat'], 0) == 2:
-            pass
+            if 'sysaddr' in vars:
+                print 'Error: PBL format does not use %sysaddr'
+                sys.exit(1)
+            #if 'pbladdr' in vars:
+            #    print 'Error: PBL format does not use %pbladdr'
+            #    sys.exit(1)
         else:
             # If we want the PBL header/footer, the vars for those must be defined
             if not 'sysaddr' in vars:
@@ -705,11 +714,14 @@ def create_source():
     endianess = ">"
     endianessrev = "<"
     if 'littleendian' in vars and int(vars['littleendian'], 0):
-        newbinary = ''
-        for i in range(0, len(binary), 4):
-                x32 = struct.unpack('>L', binary[i:i + 4])[0]
-                newbinary += struct.pack('<L', x32)
-        binary = newbinary
+        endianess = "<"
+        endianessrev = ">"
+        #binary = binary[0:len(binary) & ~3]
+        #newbinary = ''
+        #for i in range(0, len(binary), 4):
+        #        x32 = struct.unpack('>L', binary[i:i + 4])[0]
+        #        newbinary += struct.pack('<L', x32)
+        #binary = newbinary
 
     dont64bswapcrc = 0
     if 'dont64bswapcrc' in vars and int(vars['dont64bswapcrc'], 0):
@@ -717,6 +729,7 @@ def create_source():
 
     # Re-sort words in 64b quads
     if 'littleendian64b' in vars and int(vars['littleendian64b'], 0):
+        binary = binary[0:len(binary) & ~7]
         l = len(binary)
         if dont64bswapcrc and l > (size / 8):
             l -= 8
-- 
2.15.1

