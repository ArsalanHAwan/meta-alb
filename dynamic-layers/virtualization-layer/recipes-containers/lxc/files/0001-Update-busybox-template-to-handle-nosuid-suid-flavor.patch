From a6cdd936c3c1ebe27b2e19b0075f649de9aced99 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C2=96Vicovan=20Ionut-Valentin?= <Ionut.Vicovan@nxp.com>
Date: Mon, 11 Feb 2019 13:03:35 +0200
Subject: [PATCH] Update busybox template to handle nosuid/suid flavors of 
 busybox

By default the template handles only the case when there is only
one binary named "busybox", and creates command links for the
builtin applets.
There is also the case when busybox is split into two binaries,
"busybox.nosuid" and "busybox.suid".
Each of the two binaries contain a subset of the applets enabled
by the busybox global configuration. "busybox" is in this case
a link to one of them (usually "busybox.nosuid"), therefore
the original behavior of the template script would skip creation
of some very important command links which refer to applets
built into the suid binary (e.g. login, mount, passwd, su).

Signed-off-by: Vicovan Ionut-Valentin <Ionut.Vicovan@nxp.com>
Signed-off-by: Catalin Udma <catalin-dan.udma@nxp.com>
Signed-off-by: Ciprian Costea <ciprianmarian.costea@nxp.com>
---
 templates/lxc-busybox.in | 77 +++++++++++++++++++++++++++++++++---------------
 1 file changed, 54 insertions(+), 23 deletions(-)

diff --git a/templates/lxc-busybox.in b/templates/lxc-busybox.in
index 25e4cbf..7ab601f 100644
--- a/templates/lxc-busybox.in
+++ b/templates/lxc-busybox.in
@@ -66,7 +66,6 @@ copy_binary()
 install_busybox()
 {
     rootfs=$1
-    name=$2
     res=0
     tree="\
 $rootfs/selinux \
@@ -295,49 +294,54 @@ EOF
 configure_busybox()
 {
     rootfs=$1
+    bb_binary=$2
+    has_init=""
 
-    which busybox >/dev/null 2>&1
+    which $bb_binary >/dev/null 2>&1
 
     if [ $? -ne 0 ]; then
-        echo "busybox executable is not accessible"
+        echo "$bb_binary executable is not accessible"
         return 1
     fi
 
+    bbpath=`which $bb_binary`
     # copy busybox in the rootfs
-    cp $(which busybox) $rootfs/bin
+    cp $bbpath $rootfs/bin
     if [ $? -ne 0 ]; then
-        echo "failed to copy busybox in the rootfs"
+        echo "failed to copy $bb_binary in the rootfs"
         return 1
     fi
 
-    # copy host passwd
-    if ! cp "$(which passwd)" "${rootfs}/bin"; then
-	echo "ERROR: Failed to copy passwd binary"
-	return 1
-    fi
-
-    # copy bash binary as the container init
-    if ! cp "$(which bash)" "${rootfs}/sbin/init"; then
-	echo "ERROR: Failed to copy bash binary"
-	return 1
-    fi
-
-
     # symlink busybox for the commands it supports
     # it would be nice to just use "chroot $rootfs busybox --install -s /bin"
     # but that only works right in a chroot with busybox >= 1.19.0
     pushd $rootfs/bin > /dev/null || return 1
-    ./busybox --help | grep 'Currently defined functions:' -A300 | \
+    ./$bb_binary --help | grep 'Currently defined functions:' -A300 | \
       grep -v 'Currently defined functions:' | tr , '\n' | \
-      xargs -n1 ln -s busybox
-    popd > /dev/null
+      xargs -n1 ln -s $bb_binary
 
+    has_init=`./$bb_binary --help | grep 'Currently defined functions:' -A300 | grep init`
+    if [ -n "$has_init" ]; then
+        # relink /sbin/init
+        ln $rootfs/bin/$bb_binary $rootfs/sbin/init
+    fi
+    popd > /dev/null
+ 
+    if [ ! -f "$rootfs/etc/fstab" ]; then
     # /etc/fstab must exist for "mount -a"
     touch $rootfs/etc/fstab
+    fi
 
+    if [ ! -x "$rootfs/bin/passwd" -a -f "$rootfs/bin/passwd" ]; then
     # passwd exec must be setuid
     chmod +s $rootfs/bin/passwd
+    fi
+
+    if [ ! -f "$rootfs/etc/shadow" ]; then
     touch $rootfs/etc/shadow
+        # add empty password for root
+        echo "root::16631:0:99999:7:::" >> $rootfs/etc/shadow
+    fi
 
     return 0
 }
@@ -443,16 +447,43 @@ if [ -z "$rootfs" ]; then
     fi
 fi
 
-install_busybox $rootfs $name
+install_busybox $rootfs
 if [ $? -ne 0 ]; then
     echo "failed to install busybox's rootfs"
     exit 1
 fi
 
-configure_busybox $rootfs
+bb_configured=0
+
+# do we have nosuid/suid binaries?
+bb_binary=`which busybox.nosuid`
+if [ -f "$bb_binary" ]; then
+    configure_busybox $rootfs busybox.nosuid
+    if [ $? -ne 0 ]; then
+        echo "failed to configure busybox.nosuid template"
+        exit 1
+    fi
+    # create a link named busybox
+    cd $rootfs/bin && ln -s $bb_binary busybox && cd -
+    bb_configured=1
+fi
+bb_binary=`which busybox.suid`
+if [ -f "$bb_binary" ]; then
+    configure_busybox $rootfs busybox.suid
+    if [ $? -ne 0 ]; then
+        echo "failed to configure busybox.suid template"
+        exit 1
+    fi
+    bb_configured=1
+fi
+
+# otherwise use the default busybox binary or link
+if [ $bb_configured -eq 0 ]; then
+    configure_busybox $rootfs busybox
 if [ $? -ne 0 ]; then
     echo "failed to configure busybox template"
     exit 1
+    fi
 fi
 
 copy_configuration $path $rootfs $name
-- 
1.9.1

