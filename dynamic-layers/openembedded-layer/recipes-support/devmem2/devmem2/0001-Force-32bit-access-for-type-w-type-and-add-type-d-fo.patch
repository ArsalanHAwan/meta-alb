From e142ceeffe61f20832d7a89e3d6ea18aba797b93 Mon Sep 17 00:00:00 2001
From: Vicovan Ionut-Valentin <Ionut.Vicovan@nxp.com>
Date: Mon, 12 Nov 2018 16:17:32 +0200
Subject: [PATCH] Force 32bit access for type 'w' type, and add type 'd' for
 64bit access

Currently devmem2 uses 64bit access for type 'w', which is
incorrect for aarch64 platforms with 32bit bus.
We enforce access type 'w' to 32bit and add access type
'd'(double word) for 64 bit access.

Signed-off-by: Vicovan Ionut-Valentin <Ionut.Vicovan@nxp.com>
---
 devmem2.c | 44 ++++++++++++++++++++++++++++----------------
 1 file changed, 28 insertions(+), 16 deletions(-)

diff --git a/devmem2.c b/devmem2.c
index 5845381..fbc3fad 100644
--- a/devmem2.c
+++ b/devmem2.c
@@ -48,6 +48,7 @@
 #include <termios.h>
 #include <sys/types.h>
 #include <sys/mman.h>
+#include <stdint.h>
   
 #define FATAL do { fprintf(stderr, "Error at line %d, file %s (%d) [%s]\n", \
   __LINE__, __FILE__, errno, strerror(errno)); exit(1); } while(0)
@@ -69,7 +70,8 @@ int main(int argc, char **argv) {
 	if(argc < 2) {
 		fprintf(stderr, "\nUsage:\t%s { address } [ type [ data ] ]\n"
 			"\taddress : memory address to act upon\n"
-			"\ttype    : access operation type : [b]yte, [h]alfword, [w]ord\n"
+			"\ttype    : access operation type :\n"
+			"\t          [b]yte, [h]alfword, [w]ord, [d]oubleword\n"
 			"\tdata    : data to be written\n\n",
 			argv[0]);
 		exit(1);
@@ -93,25 +95,30 @@ int main(int argc, char **argv) {
     virt_addr = map_base + (target & MAP_MASK);
     switch(access_type) {
 		case 'b':
-			data_size = sizeof(unsigned char);
+			data_size = sizeof(uint8_t);
 			virt_addr = fixup_addr(virt_addr, data_size);
-			read_result = *((unsigned char *) virt_addr);
+			read_result = *((uint8_t *) virt_addr);
 			break;
 		case 'h':
-			data_size = sizeof(unsigned short);
+			data_size = sizeof(uint16_t);
 			virt_addr = fixup_addr(virt_addr, data_size);
-			read_result = *((unsigned short *) virt_addr);
+			read_result = *((uint16_t *) virt_addr);
 			break;
 		case 'w':
-			data_size = sizeof(unsigned long);
+			data_size = sizeof(uint32_t);
 			virt_addr = fixup_addr(virt_addr, data_size);
-			read_result = *((unsigned long *) virt_addr);
+			read_result = *((uint32_t *) virt_addr);
+			break;
+		case 'd':
+			data_size = sizeof(uint64_t);
+			virt_addr = fixup_addr(virt_addr, data_size);
+			read_result = *((uint64_t *) virt_addr);
 			break;
 		default:
 			fprintf(stderr, "Illegal data type '%c'.\n", access_type);
 			exit(2);
 	}
-	sprintf(fmt_str, "Read at address  0x%%08lX (%%p): 0x%%0%dlX\n", 2*data_size);
+	sprintf(fmt_str, "Read at address  0x%%08lX (%%p): 0x%%0%lulX\n", 2*data_size);
     printf(fmt_str, (unsigned long)target, virt_addr, read_result);
     fflush(stdout);
 
@@ -119,23 +126,28 @@ int main(int argc, char **argv) {
 		write_val = strtoul(argv[3], 0, 0);
 		switch(access_type) {
 			case 'b':
-				virt_addr = fixup_addr(virt_addr, sizeof(unsigned char));
+				virt_addr = fixup_addr(virt_addr, sizeof(uint8_t));
 				*((unsigned char *) virt_addr) = write_val;
-				read_result = *((unsigned char *) virt_addr);
+				read_result = *((uint8_t *) virt_addr);
 				break;
 			case 'h':
-				virt_addr = fixup_addr(virt_addr, sizeof(unsigned short));
+				virt_addr = fixup_addr(virt_addr, sizeof(uint16_t));
 				*((unsigned short *) virt_addr) = write_val;
-				read_result = *((unsigned short *) virt_addr);
+				read_result = *((uint16_t *) virt_addr);
 				break;
 			case 'w':
-				virt_addr = fixup_addr(virt_addr, sizeof(unsigned long));
+				virt_addr = fixup_addr(virt_addr, sizeof(uint32_t));
+				*((unsigned long *) virt_addr) = write_val;
+				read_result = *((uint32_t *) virt_addr);
+				break;
+			case 'd':
+				virt_addr = fixup_addr(virt_addr, sizeof(uint64_t));
 				*((unsigned long *) virt_addr) = write_val;
-				read_result = *((unsigned long *) virt_addr);
+				read_result = *((uint64_t *) virt_addr);
 				break;
 		}
-		sprintf(fmt_str, "Write at address 0x%%08lX (%%p): 0x%%0%dlX, "
-			"readback 0x%%0%dlX\n",	2*data_size, 2*data_size);
+		sprintf(fmt_str, "Write at address 0x%%08lX (%%p): 0x%%0%lulX, "
+			"readback 0x%%0%lulX\n",	2*data_size, 2*data_size);
 		printf(fmt_str, (unsigned long)target, virt_addr,
 			write_val, read_result);
 		fflush(stdout);
-- 
2.7.4

