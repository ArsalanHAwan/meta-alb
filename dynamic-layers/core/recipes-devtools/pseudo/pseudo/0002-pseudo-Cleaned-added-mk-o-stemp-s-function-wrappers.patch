From fe3347754454d06e917331868995234f13a69159 Mon Sep 17 00:00:00 2001
From: r39252 <Heinz.Wrobel@freescale.com>
Date: Thu, 19 Oct 2017 07:04:47 +0200
Subject: [PATCH 02/15] pseudo: Cleaned/added mk[o]stemp[s]() function
 wrappers.

---
 ports/unix/guts/mkostemp.c  | 13 ++++++++++++
 ports/unix/guts/mkostemps.c | 52 +++++++++++++++++++++++++++++++++++++++++++++
 ports/unix/guts/mkstemp.c   | 36 +------------------------------
 ports/unix/guts/mkstemps.c  | 12 +++++++++++
 ports/unix/wrapfuncs.in     |  3 +++
 5 files changed, 81 insertions(+), 35 deletions(-)
 create mode 100644 ports/unix/guts/mkostemp.c
 create mode 100644 ports/unix/guts/mkostemps.c
 create mode 100644 ports/unix/guts/mkstemps.c

diff --git a/ports/unix/guts/mkostemp.c b/ports/unix/guts/mkostemp.c
new file mode 100644
index 0000000..4d9e7df
--- /dev/null
+++ b/ports/unix/guts/mkostemp.c
@@ -0,0 +1,13 @@
+/*
+ * Copyright (c) 2017 Wind River Systems; see
+ * guts/COPYRIGHT for information.
+ *
+ * int mkostemp(char *template, int flags)
+ *	int rc = -1;
+ */
+
+	rc = wrap_mkostemps(template, 0, flags);
+
+/*	return rc;
+ * }
+ */
diff --git a/ports/unix/guts/mkostemps.c b/ports/unix/guts/mkostemps.c
new file mode 100644
index 0000000..408e628
--- /dev/null
+++ b/ports/unix/guts/mkostemps.c
@@ -0,0 +1,52 @@
+/*
+ * Copyright (c) 2017 Wind River Systems; see
+ * guts/COPYRIGHT for information.
+ *
+ * int mkostemps(char *template, int suffixlen, int flags)
+ *	int rc = -1;
+ */
+	PSEUDO_STATBUF buf;
+ 	int save_errno;
+	size_t len;
+	char *tmp_template;
+
+	if (!template) {
+		errno = EFAULT;
+		return -1;
+	}
+
+	len = strlen(template);
+	if(len < 6 + suffixlen || memcmp (&template[len - 6 - suffixlen], "XXXXXX", 6)) {
+
+		errno = EINVAL;
+		return -1;
+	}
+	tmp_template = PSEUDO_ROOT_PATH(AT_FDCWD, template, AT_SYMLINK_NOFOLLOW);
+
+	if (!tmp_template) {
+		errno = ENOENT;
+		return -1;
+	}
+
+	rc = real_mkostemps(tmp_template, suffixlen, flags);
+
+	if (rc != -1) {
+		save_errno = errno;
+
+		if (base_fstat(rc, &buf) != -1) {
+			real_fchmod(rc, PSEUDO_FS_MODE(0600, 0));
+			pseudo_client_op(OP_CREAT, 0, -1, -1, tmp_template, &buf);
+			pseudo_client_op(OP_OPEN, PSA_READ | PSA_WRITE, rc, -1, tmp_template, &buf);
+		} else {
+			pseudo_debug(PDBGF_CONSISTENCY, "mkostemps (fd %d) succeeded, but fstat failed (%s).\n",
+				rc, strerror(errno));
+			pseudo_client_op(OP_OPEN, PSA_READ | PSA_WRITE, rc, -1, tmp_template, 0);
+		}
+		errno = save_errno;
+	}
+	/* mkostemps only changes the XXXXXX */
+	memcpy(template + len - suffixlen - 6, tmp_template + strlen(tmp_template) - suffixlen - 6, 6);
+
+/*	return rc;
+ * }
+ */
diff --git a/ports/unix/guts/mkstemp.c b/ports/unix/guts/mkstemp.c
index 1e2b026..46f4ccc 100644
--- a/ports/unix/guts/mkstemp.c
+++ b/ports/unix/guts/mkstemp.c
@@ -6,42 +6,8 @@
  * wrap_mkstemp(char *template) {
  *	int rc = -1;
  */
-	PSEUDO_STATBUF buf;
- 	int save_errno;
-	size_t len;
-	char *tmp_template;
+	rc = wrap_mkstemps(template, 0);
 
-	if (!template) {
-		errno = EFAULT;
-		return 0;
-	}
-
-	len = strlen(template);
-	tmp_template = PSEUDO_ROOT_PATH(AT_FDCWD, template, AT_SYMLINK_NOFOLLOW);
-
-	if (!tmp_template) {
-		errno = ENOENT;
-		return -1;
-	}
-
-	rc = real_mkstemp(tmp_template);
-
-	if (rc != -1) {
-		save_errno = errno;
-
-		if (base_fstat(rc, &buf) != -1) {
-			real_fchmod(rc, PSEUDO_FS_MODE(0600, 0));
-			pseudo_client_op(OP_CREAT, 0, -1, -1, tmp_template, &buf);
-			pseudo_client_op(OP_OPEN, PSA_READ | PSA_WRITE, rc, -1, tmp_template, &buf);
-		} else {
-			pseudo_debug(PDBGF_CONSISTENCY, "mkstemp (fd %d) succeeded, but fstat failed (%s).\n",
-				rc, strerror(errno));
-			pseudo_client_op(OP_OPEN, PSA_READ | PSA_WRITE, rc, -1, tmp_template, 0);
-		}
-		errno = save_errno;
-	}
-	/* mkstemp only changes the XXXXXX at the end. */
-	memcpy(template + len - 6, tmp_template + strlen(tmp_template) - 6, 6);
 /*	return rc;
  * }
  */
diff --git a/ports/unix/guts/mkstemps.c b/ports/unix/guts/mkstemps.c
new file mode 100644
index 0000000..41118f0
--- /dev/null
+++ b/ports/unix/guts/mkstemps.c
@@ -0,0 +1,12 @@
+/*
+ * Copyright (c) 2017 Wind River Systems; see
+ * guts/COPYRIGHT for information.
+ *
+ * int mkstemps(char *template, int suffixlen)
+ *	int rc = -1;
+ */
+	rc = wrap_mkostemps(template, suffixlen, 0);
+
+/*	return rc;
+ * }
+ */
diff --git a/ports/unix/wrapfuncs.in b/ports/unix/wrapfuncs.in
index 78fa855..c25fa5e 100644
--- a/ports/unix/wrapfuncs.in
+++ b/ports/unix/wrapfuncs.in
@@ -48,6 +48,9 @@ int mkfifoat(int dirfd, const char *path, mode_t mode); /* flags=AT_SYMLINK_NOFO
 int mknod(const char *path, mode_t mode, dev_t dev); /* flags=AT_SYMLINK_NOFOLLOW */
 int mknodat(int dirfd, const char *path, mode_t mode, dev_t dev); /* flags=AT_SYMLINK_NOFOLLOW */
 int mkstemp(char *template); /* flags=AT_SYMLINK_NOFOLLOW */
+int mkostemp(char *template, int flags); /* flags=AT_SYMLINK_NOFOLLOW */
+int mkstemps(char *template, int suffixlen); /* flags=AT_SYMLINK_NOFOLLOW */
+int mkostemps(char *template, int suffixlen, int flags); /* flags=AT_SYMLINK_NOFOLLOW */
 int rename(const char *oldpath, const char *newpath); /* flags=AT_SYMLINK_NOFOLLOW */
 int renameat(int olddirfd, const char *oldpath, int newdirfd, const char *newpath); /* flags=AT_SYMLINK_NOFOLLOW */
 int rmdir(const char *path); /* flags=AT_SYMLINK_NOFOLLOW */
-- 
1.8.3.1

