From 744947a405274eb9f72c00593706055d8a324e57 Mon Sep 17 00:00:00 2001
From: Heinz Wrobel <Heinz.Wrobel@freescale.com>
Date: Wed, 29 Mar 2017 22:07:52 +0200
Subject: [PATCH 1/2] rcw: Fixed blockcopy implementation and disassembly

---
 rcw.py | 21 ++++++++++++---------
 1 file changed, 12 insertions(+), 9 deletions(-)

diff --git a/rcw.py b/rcw.py
index 7e15f26..9b9f785 100755
--- a/rcw.py
+++ b/rcw.py
@@ -61,7 +61,8 @@
 #   awrite <a> <v>  -- write value <v> to address <a>, with ACS bit set
 #   flush           -- flush (perform a read at the addr of the previous write)
 #   loadacwindow    -- LS2 family PBI, one arg
-#   poll[.long]     -- LS2 family PBI, thre args
+#   poll[.long]     -- LS2 family PBI, three args
+#   blockcopy       -- LS2 family PBI, four args
 #
 # Terminate the PBI section with ".end".
 #
@@ -279,7 +280,7 @@ def build_pbi(lines):
     for l in lines:
         # Check for an instruction without 0-2 parameters
         # The + ' ' is a hack to make the regex work for just 'flush'
-        m = re.search('([a-z]+)(|\.b1|\.b2|\.b4|\.short|\.long)\s*(?<=\s)([^,]*),?([^,]*),?([^,]*)', l + ' ')
+        m = re.search('([a-z]+)(|\.b1|\.b2|\.b4|\.short|\.long)\s*(?<=\s)([^,]*),?([^,]*),?([^,]*),?([^,]*)', l + ' ')
         if not m:
             print 'Unknown PBI subsection command "%s"' % l
             return ''
@@ -292,9 +293,11 @@ def build_pbi(lines):
         p1 = m.group(3).strip()
         p2 = m.group(4).strip()
         p3 = m.group(5).strip()
+        p4 = m.group(6).strip()
         p1 = eval(p1, {"__builtins__":None}, {}) if len(p1) else None
         p2 = eval(p2, {"__builtins__":None}, {}) if len(p2) else None
         p3 = eval(p3, {"__builtins__":None}, {}) if len(p3) else None
+        p4 = eval(p4, {"__builtins__":None}, {}) if len(p4) else None
         if op == 'wait':
             if p1 == None:
                 print 'Error: "wait" instruction requires one parameter'
@@ -359,17 +362,17 @@ def build_pbi(lines):
             if pbiformat != 2:
                 print 'Error: "blockcopy" not supported for old PBI format'
                 return ''
-            if p1 == None or p2 == None or p3 == None:
-                print 'Error: "blockcopy" instruction requires three parameters'
+            if p1 == None or p2 == None or p3 == None or p4 == None:
+                print 'Error: "blockcopy" instruction requires four parameters'
                 return ''
-            v1a = struct.pack(endianess + 'L', 0x80000000 + (p1 >> 32))
-            v1b = struct.pack(endianess + 'L', p1 & 0xffffffff)
+            v1 = struct.pack(endianess + 'L', 0x80000000 + (p1 & 0xff))
             v2 = struct.pack(endianess + 'L', p2)
             v3 = struct.pack(endianess + 'L', p3)
-            subsection += v1a
-            subsection += v1b
+            v4 = struct.pack(endianess + 'L', p4)
+            subsection += v1
             subsection += v2
             subsection += v3
+            subsection += v4
         elif op == 'flush':
             subsection += struct.pack('>LL', 0x09000000 | int(vars['pbladdr'], 16), 0)
         else:
@@ -780,7 +783,7 @@ def create_source():
                         i += 4
                         arg3 = struct.unpack(endianess + 'L', pbi[i:i+4])[0]
                         i += 4
-                        source += "blockcopy 0x%08x,0x%08x,0x%08x\n" % (arg1, arg2, arg3)
+                        source += "blockcopy 0x%02x,0x%08x,0x%08x,0x%08x\n" % ((word & 0xff), arg1, arg2, arg3)
                     elif cmd == 0x10:
                         source += "/* Disassemble not implemented for word 0x%08x */\n" % (word)
                     elif cmd == 0x11:
-- 
2.0.4

