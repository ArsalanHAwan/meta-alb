From 97a302752b67e7431eb95896ac2b5c56d733c7c0 Mon Sep 17 00:00:00 2001
From: Andrei Cherechesu <andrei.cherechesu@nxp.com>
Date: Thu, 16 Sep 2021 01:30:18 +0300
Subject: [PATCH 5/5] imagebuilder: Use dynamic sizes for loaded binaries

Imagebuilder would precompute the sizes of the loaded binaries
before generating the script, and the sizes that needed to be
provided to Xen via /chosen would be hardcoded in the boot script.

Switched to using the ${filesize} variable in u-boot, which is
set automatically after a *load command. The value stored by
filesize is now stored in a u-boot env variable with the name
corresponding to the binary that was loaded before. The newly
set variables are now used in setting the /chosen node, instead
of the hardcoded values.

Signed-off-by: Andrei Cherechesu <andrei.cherechesu@nxp.com>
---
 scripts/uboot-script-gen | 42 +++++++++++++++++++++---------------------
 1 file changed, 21 insertions(+), 21 deletions(-)

diff --git a/scripts/uboot-script-gen b/scripts/uboot-script-gen
index 2dfd93d..472b4c6 100755
--- a/scripts/uboot-script-gen
+++ b/scripts/uboot-script-gen
@@ -24,11 +24,11 @@ function add_device_tree_kernel()
 {
     local path=$1
     local addr=$2
-    local size=$3
+    local sizevar=$3
 
     echo "fdt mknod $path module$addr" >> $UBOOT_SOURCE
     echo "fdt set $path/module$addr compatible \"multiboot,kernel\" \"multiboot,module\"" >> $UBOOT_SOURCE
-    echo "fdt set $path/module$addr reg <0x0 "$addr" 0x0 "$size">" >> $UBOOT_SOURCE
+    echo "fdt set $path/module$addr reg <0x0 "$addr" 0x0 \${"$sizevar"}>" >> $UBOOT_SOURCE
     echo "fdt set $path/module$addr bootargs \"console=ttyAMA0\"" >> $UBOOT_SOURCE
 }
 
@@ -36,22 +36,22 @@ function add_device_tree_ramdisk()
 {
     local path=$1
     local addr=$2
-    local size=$3
+    local sizevar=$3
 
     echo "fdt mknod $path module$addr" >> $UBOOT_SOURCE
     echo "fdt set $path/module$addr compatible \"multiboot,ramdisk\" \"multiboot,module\"" >> $UBOOT_SOURCE
-    echo "fdt set $path/module$addr reg <0x0 "$addr" 0x0 "$size">" >> $UBOOT_SOURCE
+    echo "fdt set $path/module$addr reg <0x0 "$addr" 0x0 \${"$sizevar"}>" >> $UBOOT_SOURCE
 }
 
 function add_device_tree_passthrough()
 {
     local path=$1
     local addr=$2
-    local size=$3
+    local sizevar=$3
 
     echo "fdt mknod $path module$addr" >> $UBOOT_SOURCE
     echo "fdt set $path/module$addr compatible \"multiboot,device-tree\" \"multiboot,module\"" >> $UBOOT_SOURCE
-    echo "fdt set $path/module$addr reg <0x0 "$addr" 0x0 "$size">" >> $UBOOT_SOURCE
+    echo "fdt set $path/module$addr reg <0x0 "$addr" 0x0 \${"$sizevar"}>" >> $UBOOT_SOURCE
 }
 
 function device_tree_editing()
@@ -66,7 +66,7 @@ function device_tree_editing()
     echo "fdt set /chosen xen,xen-bootargs \"$XEN_CMD\"" >> $UBOOT_SOURCE
     echo "fdt mknod /chosen dom0" >> $UBOOT_SOURCE
     echo "fdt set /chosen/dom0 compatible \"xen,linux-zimage\" \"xen,multiboot-module\"" >> $UBOOT_SOURCE
-    echo "fdt set /chosen/dom0 reg <0x0 "$dom0_kernel_addr" 0x0 "$dom0_kernel_size">" >> $UBOOT_SOURCE
+    echo "fdt set /chosen/dom0 reg <0x0 "$dom0_kernel_addr" 0x0 \${dom0_kernel_size}>" >> $UBOOT_SOURCE
     if test "$LOAD_CMD" = "tftpb"
     then
         echo "fdt set /chosen xen,dom0-bootargs \"$DOM0_CMD\"" >> $UBOOT_SOURCE
@@ -74,7 +74,7 @@ function device_tree_editing()
         then
             echo "fdt mknod /chosen dom0-ramdisk" >> $UBOOT_SOURCE
             echo "fdt set /chosen/dom0-ramdisk compatible \"xen,linux-initrd\" \"xen,multiboot-module\"" >> $UBOOT_SOURCE
-            echo "fdt set /chosen/dom0-ramdisk reg <0x0 "$dom0_ramdisk_addr" 0x0 "$dom0_ramdisk_size">" >> $UBOOT_SOURCE
+            echo "fdt set /chosen/dom0-ramdisk reg <0x0 "$dom0_ramdisk_addr" 0x0 \${dom0_ramdisk_size}>" >> $UBOOT_SOURCE
         fi
     else
         echo "fdt set /chosen xen,dom0-bootargs \"$DOM0_CMD\"" >> $UBOOT_SOURCE
@@ -90,14 +90,14 @@ function device_tree_editing()
         echo "fdt set /chosen/domU$i memory <0x0 "${DOMU_MEM[$i]}">" >> $UBOOT_SOURCE
         echo "fdt set /chosen/domU$i cpus <"${DOMU_VCPUS[$i]}">" >> $UBOOT_SOURCE
         echo "fdt set /chosen/domU$i vpl011 <0x1>" >> $UBOOT_SOURCE
-        add_device_tree_kernel "/chosen/domU$i" ${domU_kernel_addr[$i]} ${domU_kernel_size[$i]}
+        add_device_tree_kernel "/chosen/domU$i" ${domU_kernel_addr[$i]} "domU${i}_kernel_size"
         if test "${domU_ramdisk_addr[$i]}"
         then
-            add_device_tree_ramdisk "/chosen/domU$i" ${domU_ramdisk_addr[$i]} ${domU_ramdisk_size[$i]}
+            add_device_tree_ramdisk "/chosen/domU$i" ${domU_ramdisk_addr[$i]} "domU${i}_ramdisk_size"
         fi
         if test "${domU_passthrough_dtb_addr[$i]}"
         then
-            add_device_tree_passthrough "/chosen/domU$i" ${domU_passthrough_dtb_addr[$i]} ${domU_passthrough_dtb_size[$i]}
+            add_device_tree_passthrough "/chosen/domU$i" ${domU_passthrough_dtb_addr[$i]} "domU${i}_passthrough_dtb_size"
         fi
         if test "${DOMU_DIRECT_MAP[$i]}" = "1"
         then
@@ -124,6 +124,7 @@ function add_size()
 function load_file()
 {
     local filename=$1
+    local varname="$2"
 
     local relative_path="$(realpath --no-symlinks --relative-to=$PWD $filename)"
 
@@ -133,6 +134,10 @@ function load_file()
         echo "$LOAD_CMD $memaddr $PREPEND_PATH/$relative_path" >> $UBOOT_SOURCE
     fi
     add_size $filename
+
+    if [ -n "$varname" ]; then
+        echo "setenv $varname 0x\${filesize}" >> $UBOOT_SOURCE
+    fi
 }
 
 function check_file_type()
@@ -366,15 +371,13 @@ load_file "$XEN"
 
 check_compressed_file_type $DOM0_KERNEL "executable"
 dom0_kernel_addr=$memaddr
-load_file $DOM0_KERNEL
-dom0_kernel_size=$filesize
+load_file $DOM0_KERNEL "dom0_kernel_size"
 
 if test "$DOM0_RAMDISK" && [[ $LOAD_CMD = "tftpb" ]]
 then
     check_compressed_file_type $DOM0_RAMDISK "cpio archive"
     dom0_ramdisk_addr=$memaddr
-    load_file "$DOM0_RAMDISK"
-    dom0_ramdisk_size=$filesize
+    load_file "$DOM0_RAMDISK" "dom0_ramdisk_size"
 else
     dom0_ramdisk_addr="-"
 fi
@@ -384,21 +387,18 @@ while test $i -lt $NUM_DOMUS
 do
     check_compressed_file_type ${DOMU_KERNEL[$i]} "executable"
     domU_kernel_addr[$i]=$memaddr
-    load_file ${DOMU_KERNEL[$i]}
-    domU_kernel_size[$i]=$filesize
+    load_file ${DOMU_KERNEL[$i]} "domU${i}_kernel_size"
     if test "${DOMU_RAMDISK[$i]}"
     then
         check_compressed_file_type ${DOMU_RAMDISK[$i]} "cpio archive"
         domU_ramdisk_addr[$i]=$memaddr
-        load_file ${DOMU_RAMDISK[$i]}
-        domU_ramdisk_size[$i]=$filesize
+        load_file ${DOMU_RAMDISK[$i]} "domU${i}_ramdisk_size"
     fi
     if test "${DOMU_PASSTHROUGH_DTB[$i]}"
     then
         check_compressed_file_type ${DOMU_PASSTHROUGH_DTB[$i]} "Device Tree Blob"
         domU_passthrough_dtb_addr[$i]=$memaddr
-        load_file ${DOMU_PASSTHROUGH_DTB[$i]}
-        domU_passthrough_dtb_size[$i]=$filesize
+        load_file ${DOMU_PASSTHROUGH_DTB[$i]} "domU${i}_passthrough_dtb_size"
     fi
     i=$(( $i + 1 ))
 done
-- 
2.7.4

